{"version":3,"sources":["../src/fragments.js"],"names":["moment","_","DEFAULT","TWENTYFOUR","TWELVE","SIX","fragments","getBucketIndex","time","from","data","findLastIndex","d","timestamp","getBucketTimestamp","diff","utc","startOf","valueOf","nextTime","add","timeUtc","hours","Math","floor","hour","fragmentsMap","name","value","getFragment","fragmentType"],"mappings":"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","file":"fragments.js","sourcesContent":["import moment from 'moment';\nimport _ from 'lodash';\n\nconst DEFAULT = 'DEFAULT';\nconst TWENTYFOUR = 'TWENTYFOUR';\nconst TWELVE = 'TWELVE';\nconst SIX = 'SIX';\n\nconst fragments = {\n  [DEFAULT]: {\n    getBucketIndex: (time, from, data) => {\n      return _.findLastIndex(data, (d) => d.timestamp < time);\n    },\n    getBucketTimestamp: (timestamp) => timestamp,\n    // nextTime: (time) => moment.utc(time).add(1, 'minute')\n  },\n  [TWENTYFOUR]: {\n    // getBucketIndex: (time) => time.hour() * 60 + time.minute(),\n    // getTime: (time, bucketIndex) => moment(time).startOf('day').add(bucketIndex, 'minute'),\n    getBucketIndex: (time, from) => time.diff(from, 'hours')/24,\n    getBucketTimestamp: (timestamp) => moment.utc(timestamp).startOf('day').valueOf(),\n    nextTime: (time) => moment.utc(time).add(24, 'hour')\n  },\n  [TWELVE]: {\n    // getBucketIndex: (time) => time.hour() * 4 + Math.floor(time.minute() / 15),\n    // getTime: (time, bucketIndex) => moment(time).startOf('day').add(15 * bucketIndex, 'minute'),\n    getBucketIndex: (time, from) => time.diff(from, 'hours')/12,\n    getBucketTimestamp: (timestamp) => {\n      const timeUtc = moment.utc(timestamp);\n      const hours = Math.floor(timeUtc.hour() / 12) * 12;\n      return timeUtc.startOf('day').add(hours, 'hour').valueOf();\n    },\n    nextTime: (time) => moment.utc(time).add(12, 'hour')\n  },\n  [SIX]: {\n    // getBucketIndex: (time) => time.hour(),\n    // getTime: (time, bucketIndex) => moment(time).startOf('day').add(bucketIndex, 'hour'),\n    getBucketIndex: (time, from) => time.diff(from, 'hours')/6,\n    getBucketTimestamp: (timestamp) => {\n      const timeUtc = moment.utc(timestamp);\n      const hours = Math.floor(timeUtc.hour() / 6) * 6;\n      return timeUtc.startOf('day').add(hours, 'hour').valueOf();\n    },\n    nextTime: (time) => moment.utc(time).add(6, 'hour')\n  },\n};\n\nexport const fragmentsMap = [\n  { name: 'Default', value: DEFAULT },\n  { name: 'Day', value: TWENTYFOUR },\n  { name: '12 hours', value: TWELVE },\n  { name: '6 hours', value: SIX },\n];\n\nexport const getFragment = (fragmentType) => fragments[fragmentType];\n\nexport default {\n  DEFAULT,\n  TWENTYFOUR,\n  TWELVE,\n  SIX,\n};\n"]}